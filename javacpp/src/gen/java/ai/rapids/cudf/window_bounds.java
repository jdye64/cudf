// Targeted by JavaCPP version 1.5.4: DO NOT EDIT THIS FILE

package ai.rapids.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static ai.rapids.cudf.global.cudf.*;


/**
 * \brief Abstraction for window boundary sizes
 */
@Namespace("cudf") @NoOffset @Properties(inherit = ai.rapids.cudf.presets.Cudf.class)
public class window_bounds extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public window_bounds(Pointer p) { super(p); }

  /**
   * \brief Construct bounded window boundary.
   *
   * @param value Finite window boundary (in days or rows)
   */
  public static native @ByVal window_bounds get(@ByVal size_type value);

  /**
   * \brief Construct unbounded window boundary.
   *
   * @return window_bounds
   */
  public static native @ByVal window_bounds unbounded();

  // TODO: In the future, add units for bounds.
  //       E.g. {value=1, unit=DAYS, unbounded=false}
  //       For the present, assume units from context:
  //         1. For time-based window functions, assume DAYS as before
  //         2. For all else, assume ROWS as before.
  @MemberGetter public native @Cast("const bool") boolean is_unbounded();
  @MemberGetter public native @Const @ByRef size_type value();
}
