// Targeted by JavaCPP version 1.5.4: DO NOT EDIT THIS FILE

package ai.rapids.cudf;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import ai.rapids.thrust.*;
import static ai.rapids.cudf.global.thrust.*;
import ai.rapids.rmm.*;
import static ai.rapids.cudf.global.rmm.*;

import static ai.rapids.cudf.global.cudf.*;

/**
 * \addtogroup aggregation_factories
 * \{
 * \file
 */

/**
 * \brief Base class for specifying the desired aggregation in an
 * {@code aggregation_request}.
 *
 * Other kinds of aggregations may derive from this class to encapsulate
 * additional information needed to compute the aggregation.
 */
@Namespace("cudf") @NoOffset @Properties(inherit = ai.rapids.cudf.presets.cudf.class)
public class aggregation extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public aggregation(Pointer p) { super(p); }

  /**
   * \brief Possible aggregation operations
   */
  public enum Kind {
    /** sum reduction */
    SUM(0),
    /** product reduction */
    PRODUCT(1),
    /** min reduction */
    MIN(2),
    /** max reduction */
    MAX(3),
    /** count number of valid elements */
    COUNT_VALID(4),
    /** count number of elements */
    COUNT_ALL(5),
    /** any reduction */
    ANY(6),
    /** all reduction */
    ALL(7),
    /** sum of squares reduction */
    SUM_OF_SQUARES(8),
    /** arithmetic mean reduction */
    MEAN(9),
    /** groupwise variance */
    VARIANCE(10),
    /** groupwise standard deviation */
    STD(11),
    /** median reduction */
    MEDIAN(12),
    /** compute specified quantile(s) */
    QUANTILE(13),
    /** Index of max element */
    ARGMAX(14),
    /** Index of min element */
    ARGMIN(15),
    /** count number of unique elements */
    NUNIQUE(16),
    /** get the nth element */
    NTH_ELEMENT(17),
    /** get row-number of element */
    ROW_NUMBER(18),
    /** collect values into a list */
    COLLECT(19),
    /** window function, accesses row at specified offset following current row */
    LEAD(20),
    /** window function, accesses row at specified offset preceding current row */
    LAG(21),
    /** PTX UDF based reduction */
    PTX(22),
    /** CUDA UDf based reduction */
    CUDA(23);

      public final int value;
      private Kind(int v) { this.value = v; }
      private Kind(Kind e) { this.value = e.value; }
      public Kind intern() { for (Kind e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }

  public aggregation(Kind a) { super((Pointer)null); allocate(a); }
  private native void allocate(Kind a);
  public aggregation(@Cast("cudf::aggregation::Kind") int a) { super((Pointer)null); allocate(a); }
  private native void allocate(@Cast("cudf::aggregation::Kind") int a);
  /** The aggregation to perform */
  public native Kind kind(); public native aggregation kind(Kind setter);

  public native @Cast("bool") boolean is_equal(@Const @ByRef aggregation other);

  public native @Cast("size_t") long do_hash();

  public native @UniquePtr aggregation clone();
}
